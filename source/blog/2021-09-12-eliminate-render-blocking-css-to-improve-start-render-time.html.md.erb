---
title: Eliminate render blocking CSS to improve start render time
date: 2021-09-12 10:27
tags:
  - Web performance
---
Although this website scores a perfect 100 in [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights), that doesn't mean things can't be improved. First time visitors on slower connections used to see nothing for over 1.6s before finally seeing a fully rendered view. I'd like to explain how I rendered the view more progressively with inline and async CSS to improve start render time by 0.5s.

<!--more-->

The best place to begin is with a sample run of my homepage on [WebPageTest](https://www.webpagetest.org/) on an Emulated Motorola G (gen 4) device using a Chrome browser with a 3G fast connection.

![](webpagetest.jpg)

From this you can see that there are 2 render blocking CSS assets, marked by white x's on an orange background to the left of the asset name. This means that there will be absolutely nothing on the screen until those assets have finished being downloaded and parsed. You may also notice that, even with this done, there is still a period of time before start render occurs which is represented with the final vertical green lime. Just before this, there is an intensive block of purple in the browser main thread which is taken up with layout and paint.

You can see the effects of this in the following filmstrip.

![](webpagetest_screenshot.jpg)

The screen is totally blank until 1.7s, at which point there is a fully rendered view. Not a very progressive load I'm sure you'll agree!

## The ideal solution

My preference was to have at least something on the screen very soon after the page content has been fetched at around 1s. Creating this impression in the users mind that at least something is happening is very important to keep the user hanging around. Too much time with a blank screen and they'll quickly abandon the visit and move onto something else.

Therefore, my plan was to have the background colour visible as well as the navigation component at the top of the screen before finally displaying the rest of the content.

In order to make this happen, I needed to alter my CSS so that I inlined the portion of CSS required for the background and navigation and then load the rest of the CSS asynchronously. Having a minimal area of the screen rendering straight away meant that I wouldn't have to inline too much CSS. It's a bit of a balancing act but I try to keep at 5kb's worth or under (this value is the total before any compression with gzip or brotli) of inlined CSS. You'll take the pain of downloading that inlined CSS on every page load because it can't be cached with the rest of your assets so it's best to keep it as minimal as possible.

## My approach

I fired up my dev server and loaded up the home page. Next, I open the Chrome Dev tools and navigate to the Network tab. Finally, I right click on each of my CSS files and choose to block the request URL. Then when I reload the page I have a totally unstyled page and this makes it easy to then start adding the inlined styles to get to a point where I only added the bare minimum to achieve the initial load I was after.

The next part is going to vary depending on your asset bundling setup but I'll show what I did and hopefully that will give you some pointers. I use [Vite](https://vitejs.dev/) under the hood but with my site being Ruby based I used [Vite Ruby](https://vite-ruby.netlify.app/) to add some additional helper methods. If you like, you can read more about this setup [here](/blog/dropping-webpack-for-vite-part-2/).

Usually I would call my CSS files in the head with the following helper method as an example

<% highlight code: "ruby" do %>
  vite_stylesheet_tag early_paint_css, "data-turbo-track": "reload"
<% end %>

but instead I change the method call to

<% highlight code: "ruby" do %>
  vite_inline_css "early_paint_css"
<% end %>

and then add this `vite_inline_css` method to my helpers.

<% highlight code: "ruby" do %>
  def vite_inline_css(asset_name)
    return build_inline_css(asset_name) if @app.build?
    vite_stylesheet_tag asset_name, "data-turbo-track": "reload"
  end
  
  ...

  private

  def build_inline_css(asset_name)
    asset_path = vite_asset_path(asset_name, type: :stylesheet)
    altered_path = "build#{asset_path}"
    "<style type='text/css'>#{File.read(altered_path)}</style>"
  end
<% end %>

If the static site is being built, as noted by `@app.build?` then I find the path to the asset file that has been built by Vite and then take the content of that file and output it in place between style tags. I can't do this in development because Vite doesn't create a bundled file (that's why it's so fast) so in development I simply serve the file as a render blocking resource as I was doing before.

With that done I could start going through the gradual process of taking CSS out of the other asset files and adding it to my `early_paint_css.css` file until I had all that I needed.

One final very important piece of CSS I had to add to the end of that file was

<% highlight code: "css" do %>
  .container:not(:first-child) {
    display: none;
  }
<% end %>

Again, this is very much going to vary depending on the structure of you site. In my case, the body of the HTML looks roughly as follows

<% highlight code: "html" do %>
  <body>
    <div class="container"></div>
    <div class="container"></div>
  </body>
<% end %>

with the first div being the nav component. Therefore any container classes that come after this should not be displayed. If you don't do this then you're going to get a flash of unstyled content (FOUC) which looks pretty janky. The easiest way to then show this content again is to add the following to the main CSS file which is loaded in asynchronously

<% highlight code: "css" do %>
  .container:not(:first-child) {
    display: block;
  }
<% end %>

Because at this point you have the majority of the missing styles needed then it's safe to now display the content.

One thing I should mention is that using `display: none;` seems to be a safer bet than using `visibility: hidden;`. This is how I had originally implemented a similar solution at my work and it worked really well with the Core Web Vitals scoring but then we suddenly started seeing lots of poor scoring for Cumulative Layout Shift (CLS). I was a bit stumped by the change and only after quite a bit of experimenting did I discover that shifting to `display: none;` fixed it. Therefore had been no visible shifting on the screen and to the user the 2 solutions looked exactly the same but the algorithm for CLS must have changed to start picking up on the shifts with visibility set to hidden.