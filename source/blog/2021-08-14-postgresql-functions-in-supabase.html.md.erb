---
title: PostgreSQL Functions in Supabase
date: 2021-08-14 18:54
tags:
  - Software engineering
  - JavaScript
---
I love the RESTful API generated automatically by [PostgREST](https://postgrest.org/) from my [Supabase](https://supabase.io/) PostgreSQL schema. However, at the beginning I did have concerns about how I could handle more complex queries ... that was at least until I read more about PostgreSQL Functions and how to build them in Supabase!

<!--more-->

This is the [Netlify build data dashboard](/dashboard/) I was working towards building and I wanted to avoid introducing a calendar datepicker interface but rather only show the the years and months I had build data for from my deploys. Below is a table representing my database columns

<% table caption: "Netlify deploy data table" do %>
  <% table_head do %>
    <tr>
      <th>id</th>
      <th>deploy_id</th>
      <th>branch</th>
      <th>context</th>
      <th>deploy_time</th>
      <th>created_at</th>
    </tr>
  <% end %>

  <% table_body do %>
    <tr>
      <th>1</th>
      <td>xxxxxxxxxxxxxxxxxxxxxxxx</td>
      <td>main</td>
      <td>production</td>
      <td>38</td>
      <td>2021-07-22T18:11:31.959+00:00</td>
    </tr>
  <% end %>
<% end %>

What I wanted was to query the database and return a column of unique years present in the `created_at` column. Additionally, for each year I wanted another column consisting of an array of unique months and I could use this to build out the buttons on the dashboard interface. Essentially the result should look similar to the following

<% table caption: "Unique years and months" do %>
  <% table_head do %>
    <tr>
      <th>years</th>
      <th>month_numbers</th>
    </tr>
  <% end %>

  <% table_body do %>
    <tr>
      <th>2020</th>
      <td>{9,10,11,12}</td>
    </tr>
    <tr>
      <th>2021</th>
      <td>{1,2,3,4,5,6,7}</td>
    </tr>
  <% end %>
<% end %>

I could write the following SQL query to generate this result

<% highlight code: "bash" do %>
SELECT
  distinct(EXTRACT(YEAR FROM created_at)) AS year,
  array_agg(distinct(EXTRACT(MONTH FROM created_at))) AS month_numbers
FROM public.netlify_deploy_data
GROUP BY year
ORDER BY year ASC
<% end %>

but the problem was using the [JavaScript Supabase client](https://supabase.io/docs/reference/javascript/supabase-client) to create the query. I'm not sure this can be done through the client but that when I read about PostgreSQL Functions in Supabase and saw how it could simplify things for me.

## PostgreSQL Functions

I think this is a fairly new addition to Supabase but I found it really straight forward to use. In your Supabase dashboard for your organisation, navigate to `/database/functions` where you can create a new function.

First up, give your function a name (netlify_deploy_data_years_and_months in my case) and next select a return type. Now, this is where I encountered another brief stumbling block because I could only return a single record or a value of a certain type from what I could see. However, I did see the option for returning JSON and I figured if I could wrap my SQL query to return JSON then I could use that no matter how many records I had. After playing with the queries locally I managed to get things working with the following

<% highlight code: "bash" do %>
SELECT array_to_json(array_agg(row_to_json(t)))
FROM (
  SELECT
    distinct(EXTRACT(YEAR FROM created_at)) AS year,
    array_agg(distinct(EXTRACT(MONTH FROM created_at))) AS month_numbers
  FROM public.netlify_deploy_data
  GROUP BY year
  ORDER BY year ASC
)t;
<% end %>

which gives me back

<% highlight code: "json" do %>
[{"year":2020,"month_numbers":[9,10,11,12]}, {"year":2021,"month_numbers":[1,2,3,4,5,6,7]}]
<% end %>

and now I could use the JSON return type for my function.

In order to add this SQL to the function rather than using plpgsql, I had to click the toggle for `show advanced settings` and change the language to sql. Now you can add the SQL snippet from above to the `Definition` section.

This now makes it really easy to query using the JavaScript client with the following

<% highlight code: "javascript" do %>
const { data, error } = await supabase
  .rpc("netlify_deploy_data_years_and_months")
<% end %>

As I use Supabase more, I'm finding more functionality and I have to say that I'm really impressed with what I've seen, it's a fantastic product.