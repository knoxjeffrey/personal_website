---
title: Building a custom data layer for logging web performance metrics
date: 2021-08-22 21:46
tags:
  - Software engineering
  - Web performance
  - JavaScript
---
I've started using [Perfume.js](https://zizzamia.github.io/perfume/) on this site to capture web performance metrics including [Core Web Vitals](https://web.dev/vitals/). As part of this, I wanted to create a flexible logging tool that would help me send this data to my [Supabase](https://supabase.io/) backend but also handle logging any other performance data in the future, and heck, handle anything I might want to log!

<!--more-->

My solution is inspired by the idea of a dataLayer as used with Google Tag Manager. It's an array (with some additional functionality in my case) that can have objects with an event name pushed to it from anywhere in the front-end. Those event objects can then be handled on an individual basis, such as forwarding on performance events to supabase in this case. I'm calling my creation pushr!

## Array proxy

I mentioned that the pushr array will have a little bit of additional functionality. Instead of constantly polling the array to check for new event, I'd like for the array to emit a custom event whenever new data is pushed to the array. Then I can create an event listener to handle the data passed with that event.

To achieve this I can use a [Proxy object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) which can intercept and redefine fundamental operations for that object. The proxy takes 2 arguments:

1. A target which is the object I want to proxy, an array in my case.
2. A handler which is an object that defines which operations will be intercepted and how to redefine those intercepted operations.

I'm going to provide an implementation for the `set()` handler in the proxy which is a trap for setting a property value. In there I'll define a new custom event called `pushrset` which will contain the data that has just been set on the array and then emit the event.

So, to start with I'll create a new directory in my javascript folder called `pushr` and add a file called `index.js`.

<% highlight code: "javascript" do %>
export const pushr = (() => {

  const _pushrHandler = {
    set: (target, prop, value) => {
      if (prop !== "length") {
        const pushEvent = new CustomEvent("pushrset", { detail: value })
        window.dispatchEvent(pushEvent)
      }
      return Reflect.set(target, prop, value)
    }
  }

  const init = () => {
    window.pushr = new Proxy(\[], _pushrHandler)
  }

  return { init }
})()
<% end %>

If I now import `pushr` into my main JS file and ensure I call `pushr.init()` before my other code then I will have the Proxy object available when I call `window.pushr` from the dev tools console. As it is also called before all of my other JavaScript, I can now make a test by inserting `window.pushr.push({ event: "test" })` anywhere in my other JavaScript files.

## Listening for pushr

Okay, that's great it's set up but it's not really doing anything useful as the moment. Next I'll create a file called `pushr_listeners.js`

<% highlight code: "javascript" do %>
export const pushrListeners = (() => {
  const _pushrsetListener = () => {
    window.addEventListener("pushrset", event => {
    })
  }

  const _turboListener = () => {
    window.addEventListener("turbo:before-visit", () => {
    })
  }

  const init = () => {
    _pushrsetListener()
    _turboListener()
  }

  return { init }
})()

<% end %>

You can see from the code that I have now created a listener for the `pushrset` event. In my case I'm also listening for `turbo:before-visit` because I am using [HOTWire's Turbo](https://turbo.hotwired.dev/) on my site so I want to listen for page transitions and potentially add behaviour for this as well to clear events out of my `pushr` queue.

I then need to import this in my `index.js` file with

<% highlight code: "javascript" do %>
import { pushrListeners } from "~/javascripts/pushr/pushr_listeners"
<% end %>

and then alter the `init()` function

<% highlight code: "javascript" do %>
const init = () => {
  pushrListeners.init()
  window.pushr = new Proxy([], _pushrHandler)
}
<% end %>

## Dispatching pushr events

Cool, now the required events are being listened to I want to handle those events by creating a dispatcher. Add a new folder at `pushr/dispatchers` and add a new file called `index.js`

<% highlight code: "javascript" do %>
export const dispatchers = (() => {
  const pushrDispatchers = (pushrObject) => {
  }

  const turboDispatchers = () => {
    window.pushr.length = 0
  }

  return {
    pushrDispatchers,
    turboDispatchers
  }
})()
<% end %>

So here I've added 2 dispatchers to handle the different events. I'm also clearing out the pushr proxy array so it starts fresh on each page transition. Be careful not to clear it like this `window.pushr = []` because otherwise you set the array back to a regular array and lose all the proxy behaviour.

To hook this up to the listeners, change `pushr_listeners.js` like so

<% highlight code: "javascript" do %>
import { dispatchers } from "~/javascripts/pushr/dispatchers"

...

const _pushrsetListener = () => {
  window.addEventListener("pushrset", event => {
    dispatchers.pushrDispatchers(event.detail)
  })
}

...

const _turboListener = () => {
  window.addEventListener("turbo:before-visit", () => {
    dispatchers.turboDispatchers()
  })
}

...
<% end %>

## Handle the first pushr event

To check this all works, I'm going to create a test dispatcher that will handle any events with the name `test`.

Add a new file to `pushr/dispatchers` called `test.js

<% highlight code: "javascript" do %>
export const rum = (() => {
  const pushrDispatcher = (pushrObject) => {
    if (pushrObject.event !== "test") return
    
    console.log("hello test dispatcher!")
  }

  const turboDispatcher = () => {
    console.log("changed page!")
  }

  return {
    pushrDispatcher,
    turboDispatcher
  }
})()
<% end %>

and also change `pushr/dispatchers/index.js` like so

<% highlight code: "javascript" do %>
import { test } from "~/javascripts/pushr/dispatchers/test"

export const dispatchers = (() => {
  const pushrDispatchers = (pushrObject) => {
    test.pushrDispatcher(pushrObject)
  }

  const turboDispatchers = () => {
    test.turboDispatcher()
    window.pushr.length = 0
  }

  return {
    pushrDispatchers,
    turboDispatchers
  }
})()
<% end %>

Now, if you add `window.pushr.push({ event: "test" })` to somewhere in your code, as soon as that code is evaluated, you should get the `hello test dispatcher!` message in the console. If you give the event another name then you should see nothing. You will also get the `changed page!` on every page transition.