---
title: Building a JavaScript documentation website
date: 2021-06-09 19:25
tags:
  - Software engineering
---
I think code documentation works best when it lives side by side with the code it is documenting rather than being written in a separate document. When it's separate, it becomes easy for documentation to become stale. Out of sight, out of mind!

<!--more-->

However, documentation can be easier to read if it's nicely formatted rather than reading straight from the code editor. With this in mind, I started looking at [JSDoc](https://jsdoc.app/) for documenting my JavaScript code. You simply write the documentation with your source code and then run a command to generate a static website build with nicely formatted documentation. Best of both worlds!

In this article I'll show you how I setup and wrote documentation with JSDoc and how I deployed the output to Netlify.

## Folder structure

At the root of my repo I created a new folder at `docs/jsdoc` and changed into that directory in the console. Then I ran `yarn init` and followed the console steps to create a new `package.json` file. Then I ran `yarn add jsdoc docdash --dev` to install the required packages.

Keeping all of the documentation configuration in a subdirectory prevents polluting the main code base with additional configuration and keeps the node modules separate. Netlify supports deploying sites from within subdirectories so everything required to build the documentation sites can be neatly organised in it own folder. I can also easily add other folders under `docs` for additional documentation sites, say for my [view components](/blog/building-view-components-in-middleman/) as an example.

## Configuration

Next I created a simple \`README.md\` file which will automatically get pulled into your \`index.html\` file by JSDoc during the build.

Then I had to configure a script to run the JSDoc build in `package.json:`

```
"scripts": {
  "build_jsdoc": "rm -rf build && jsdoc -c jsdoc.json -d build",
  "dev_jsdoc": "rm -rf dist && jsdoc -c jsdoc.json -d dist"
}
```

I also ensured that `dist` was added to my `.gitignore` file. The `build_jsdoc` script is used to generate the production version of the documentation but sometimes I want to test things out without messing up the production version so I also added the `dev_jsdoc` command for this purpose. In summary, this first removes all files in the build folder, get the configuration for JSDoc from `jsdoc.json` and outputs the build in either the `build` or `dist` folders.

So clearly I needed a `jsdoc.json` file to write my JSDoc configuration:

```
{
  "docdash": {
    "static": true,
    "sort": true,
    "search": true,
    "collapse": true,
    "typedefs": true,
    "removeQuotes": "none",
    "scripts": [],
    "menu":{
      "Github repo": {
        "href":"https://github.com/knoxjeffrey/personal_website",
        "target":"_blank",
        "class":"menu-item",
        "id":"repository"
      }
    }
  },
  "opts": {
    "access": "all",
    "readme": "README.md",
    "recurse": true,
    "template": "node_modules/docdash"
  },
  "plugins": [
  ],
  "templates": {
    "default": {
      "includeDate": false,
      "useLongnameInNav": true
    }
  },
  "source": {
    "include": ["../../source/assets/javascripts"],
    "includePattern": ".+.js?$"
  }
}
```

You no doubt have already noticed [Docdash](https://github.com/clenemt/docdash) which I added to give a clean, responsive documentation template theme for JSDoc 3. You can read more about the configuration options on their GitHub repo.

Under `source` you can add as many folders as you need which directs JSDoc where to navigate to in order to find your documentation and you can include a regex pattern for the file extensions.

One configuration change I ensured I made was to set `includeDate` to false. If you set it as true then the current date and time of when the documentation was built is added to every page. However this would mean your build output will change every time you run `yarn build_jsdoc` even when there are no documentation changes and therefore you will end up with unnecessary builds in Netlify. This became even more important when I automated the build process with a GitHub action which I will go into in my next blog post.

Just a little bit more configuration left! I have a `netlify.toml` file at the root of my repo but I need another one to sit with my docs:

```
[build]
  # Directory that contains the deploy-ready HTML files and assets generated by
  # the build. This is relative to the base directory if one has been set, or the
  # root directory if a base has not been set.
  publish = "build/"

[context.production.processing]
  skip_processing = false

[context.production.processing.css]
  bundle = true
  minify = true

[context.production.processing.js]
  bundle = true
  minify = true

[context.production.processing.html]
  pretty_urls = false

[context.production.processing.images]
  compress = false
```

You have to make sure the base directory is set from within the Netlify UI otherwise Netlify will build from the root and also read the `netlify.toml` in the root. One other thing to note from my config is that `pretty_urls` should be set as false otherwise the sub navigation within the documentation site will not work correctly.