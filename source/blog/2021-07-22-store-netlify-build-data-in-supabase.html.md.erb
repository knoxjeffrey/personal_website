---
title: Store Netlify build data in Supabase
date: 2021-07-22 20:19
tags:
  - Software engineering
  - Netlify
  - Ruby
  - JavaScript
---
I've found it useful in the past to keep a close eye on build times because it can be easy to introduce code over time that drives the build time up. By the time you notice that this is becoming a pain point, it's very difficult to track down the offending pieces of code to resolve the issue.

<!--more-->

[Netlify](https://www.netlify.com/) does keep a record of the builds in their UI but it's difficult and slow to manually click through and figure out any kind of pattern. There's also the [Netlify API](https://open-api.netlify.com/) which you could query directly to look at records over time but again this can be tricky because you can't drill down in the API queries to search by date, build time, etc.

What I would like to do is store the build data at the end of each build and then I can build my own graphical interface to query and drill down into the data as I please. This post will focus on the first piece of the puzzle, storing the data but I plan on following up soon with another post using [d3.js](https://d3js.org/) to visualise the data.

## The tech stack

This post is going to pull together multiple features of Netlify and [Supabase](https://supabase.io/) so there'll be plenty to get stuck into:

* A Netlify [Build Plugin](https://www.netlify.com/products/build/plugins/) to pull the build identifier
* A Netlify [Background Function](https://docs.netlify.com/functions/background-functions/) for the Build Plugin to send the data to
* The Netlify [API](https://docs.netlify.com/api/get-started/) called within the Background Function to fetch the data  associated with the build identifier
* The Supabase [API](https://supabase.io/docs/guides/api) called within the Background Function to push the build data to Supabase
* More info about working with Supabase in local development including adding [pgAdmin](https://www.pgadmin.org/) to the [Docker](https://www.docker.com/) container as well as pulling the schema and data down from Supabase production to local and vice-versa.

Time to get started!

## Netlify Build Plugin

I only want to log the build details if the build is successful which can be done using the `onSuccess` event handler for Build Plugins. When this event fires I will get the deploy id and POST the id to a Netlify Background Function.

This is my first Netlify Buuild plugin so I need to create a new `plugins` directory and a nested `successful-deploy-logger` folder with a `index.js` file and `manifest.yml` file.

The `manifest.yml` file is simple and only contains the line `name: successful-deploy-logger`.

I also need to make Netlify aware of the plugin and add it to my `netlify.toml` file

<% highlight code: "json" do %>
[[plugins]]
  package = "/plugins/successful-deploy-logger"
<% end %>

Finally, there is the plugin itself in the `index.js` file that will run on a successful build

<% highlight code: "javascript" do %>
const fetch = require("node-fetch");

const {
  DEPLOY_ID,
  DEPLOY_PRIME_URL,
  FUNCTION_SECRET
} = process.env

const callNetlifyDeloyLogger = async () => {
  const response = await fetch(`${DEPLOY_PRIME_URL}/.netlify/functions/netlify_deploy_logger-background`, { 
    method: "POST",
    body: JSON.stringify({ deploy_id: DEPLOY_ID, secret: FUNCTION_SECRET })
  })
  if (response.ok) return console.log("Success")
  console.log(response.status)
}

module.exports = {
  onSuccess: async () => {
    console.log("Calling Netlify deploy logger background function")
    await callNetlifyDeloyLogger();
  }
}
<% end %>