---
title: Store Netlify build data in Supabase
date: 2021-07-22 20:19
tags:
  - Software engineering
  - Netlify
  - Ruby
  - JavaScript
---
I've found it useful in the past to keep a close eye on build times because it can be easy to introduce code over time that drives the build time up. By the time you notice that this is becoming a pain point, it's very difficult to track down the offending pieces of code to resolve the issue.

<!--more-->

[Netlify](https://www.netlify.com/) does keep a record of the builds in their UI but it's difficult and slow to manually click through and figure out any kind of pattern. There's also the [Netlify API](https://open-api.netlify.com/) which you could query directly to look at records over time but again this can be tricky because you can't drill down in the API queries to search by date, build time, etc.

What I would like to do is store the build data at the end of each build and then I can build my own graphical interface to query and drill down into the data as I please. This post will focus on the first piece of the puzzle, storing the data but I plan on following up soon with another post using [d3.js](https://d3js.org/) to visualise the data.

## The tech stack

This post is going to pull together multiple features of Netlify and [Supabase](https://supabase.io/) so there'll be plenty to get stuck into:

* A Netlify [Build Plugin](https://www.netlify.com/products/build/plugins/) to pull the build identifier
* A Netlify [Background Function](https://docs.netlify.com/functions/background-functions/) for the Build Plugin to send the data to
* The Netlify [API](https://docs.netlify.com/api/get-started/) called within the Background Function to fetch the data  associated with the build identifier
* The Supabase [API](https://supabase.io/docs/guides/api) called within the Background Function to push the build data to Supabase
* More info about working with Supabase in local development including adding [pgAdmin](https://www.pgadmin.org/) to the [Docker](https://www.docker.com/) container as well as pulling the schema and data down from Supabase production to local and vice-versa.

Time to get started!

## Netlify Build Plugin

I only want to log the build details if the build is successful which can be done using the `onSuccess` event handler for Build Plugins. When this event fires I will get the deploy id and POST the id to a Netlify Background Function.

This is my first Netlify Buuild plugin so I need to create a new `plugins` directory and a nested `successful-deploy-logger` folder with a `index.js` file and `manifest.yml` file.

The `manifest.yml` file is simple and only contains the line `name: successful-deploy-logger`.

I also need to make Netlify aware of the plugin and add it to my `netlify.toml` file

<% highlight code: "json" do %>
[[plugins]]
  package = "/plugins/successful-deploy-logger"
<% end %>

Finally, there is the plugin itself in the `index.js` file that will run on a successful build

<% highlight code: "javascript" do %>
const fetch = require("node-fetch");

const {
  DEPLOY_ID,
  DEPLOY_PRIME_URL,
  FUNCTION_SECRET
} = process.env

const callNetlifyDeloyLogger = async () => {
  const response = await fetch(`${DEPLOY_PRIME_URL}/.netlify/functions/netlify_deploy_logger-background`, { 
    method: "POST",
    body: JSON.stringify({ deploy_id: DEPLOY_ID, secret: FUNCTION_SECRET })
  })
  if (response.ok) return console.log("Success")
  console.log(response.status)
}

module.exports = {
  onSuccess: async () => {
    console.log("Calling Netlify deploy logger background function")
    await callNetlifyDeloyLogger();
  }
}
<% end %>

You can find more information on Netlify build environment variables [here](https://docs.netlify.com/configure-builds/environment-variables/)
but I fetch the `DEPLOY_PRIME_URL` to ensure I'm POSTing to the function that is specific to my
Deploy Preview or Production build.

Another thing you might notice is that I include a `FUNCTION_SECRET` in my POST. The function is going
to be inserting data into my production Supabase database and the Netlify Function endpoint is public
so really now anyone could be hitting it and POSTing goodness knows what to my database.

By including a secret environment variable in the Netlify UI I can fetch it in this Build Plugin, send
it in the POST to the function and the function will also be set up to pull the `FUNCTION_SECRET`
from Netlify. Therefore, I will be able to check the `secret` in the request to see if it matches the one
from the Netlify UI. If not then the function will exit before trying any database operation.

## Netlify Background Function

A question you may be asking is, why a background function and not a normal function? A large benefit
for my use case is that a Background Function will return an immediate 202 client response on successful
invocation and then continue running in the background until it completes. This keeps my builds super
speedy, with the Build Plugin completing in well under 500ms. Additionally, retries are built into
Background Functions meaning if the first attempt fails, the system retries on 2 more occassions which
makes my logging more resilient. A final point is that this data is purely for my logging purposes and
I'm in no hurry to get the info back to a user for example so I'm happy for the function to sit in
a queue for a short while.

For the longer term, one thing I would like to investigate further with Background Functions is how to
identify that the function has failed on the 3rd and final attempt as I'd like at that point to be
logging the fail information, reporting to Slack, etc for later diagnosis.
