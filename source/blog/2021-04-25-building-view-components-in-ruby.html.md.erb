---
title: Building view components in Ruby
date: 2021-04-25 20:57
tags:
  - Ruby
  - Software engineering
---
This site is styled using the wonderful [Terminal CSS](https://terminalcss.xyz/) which has multiple components included. One feature of Javascript frameworks that I like is this concept of components where the HTML, JavaScript and CSS live together rather than being spread about in different folders in the code base. The [ViewComponent](https://viewcomponent.org/) framework has more recently been introduced to Rails which achieves this and, along with things like [Hotwire](https://hotwire.dev/), are improving the front end experience for developers.

View components are not something that exist for the Middleman static site generator but it's something I fancied trying to implement on my site which is built with Middleman. I wanted something that could be configured once and continue to work when adding new Ruby code, JavaScript and CSS.

In terms of creating the HTML, there were a few approaches that could be taken. Partials for example, are a well used pattern for reusing similar code and locals can be passed to tailor their content and appearance. Partials however would really need to live in their own folder in order to work with Middleman so not really suitable for the goal of grouping the code with JavaScript and CSS. Partials are also slow so I would rather avoid their use for components which will be called extensively on every page.

Helpers in Middleman are another option but again there are expectations in Middleman about where the code should sit and it is generally within a \`\`\`helpers\`\`\` folder at the root of the project. However, helpers can also sit within Middleman extensions where you can add a helpers block. The extensions are good because they can sit anywhere within the code base and simply have to be required and activated in Middleman so this looked like a good area to experiment on.

So, first things first, require and activate. I didn't want to manually require a new extension every time I wanted a new component so a neater solution was to keep them under a folder (a folder called \`\`\`components\`\`\` in this case) and I added a simple gem called [require_all](https://github.com/jarmo/require_all) that allowed me to load all files using a glob pattern:

```ruby
require_all "./components/**/*.rb"
```

and then activate all components by following a naming convention:

```ruby
Pathname.new("./components").children.each do |entry|
  return unless entry.directory?
  activate "#{entry.basename.to_s}_component".to_sym
end
```